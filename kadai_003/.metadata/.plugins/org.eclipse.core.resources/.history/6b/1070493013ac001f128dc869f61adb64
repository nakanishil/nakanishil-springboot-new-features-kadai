package com.example.samuraitravel.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.samuraitravel.entity.Favorite;
import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.service.FavoriteService;
import com.example.samuraitravel.service.UserService;

@Controller
@RequestMapping("/favorites")
public class FavoriteController {

    private static final Logger logger = LoggerFactory.getLogger(FavoriteController.class);

    private FavoriteService favoriteService;
    private UserService userService;
    
    // コンストラクタインジェクションを使用
    public FavoriteController(FavoriteService favoriteService, UserService userService) {
        this.favoriteService = favoriteService;
        this.userService = userService;
    }

    // ユーザーIDでお気に入り取得
    @GetMapping("/user/{userId}")
    public List<Favorite> getFavoritesByUserId(@PathVariable Integer userId) {
        logger.info("Fetching favorites for userId: {}", userId);
        return favoriteService.getFavoritesByUserId(userId);
    }

    // 宿IDでお気に入り取得
    @GetMapping("/house/{houseId}")
    public List<Favorite> getFavoritesByHouseId(@PathVariable Integer houseId) {
        logger.info("Fetching favorites for houseId: {}", houseId);
        return favoriteService.getFavoritesByHouseId(houseId);
    }

    // お気に入り登録
    @PostMapping
    public ResponseEntity<Favorite> saveFavorite(@RequestBody Favorite favorite) {
        logger.info("Received request to save favorite: {}", favorite);
        Favorite savedFavorite = favoriteService.saveFavorite(favorite);
        return ResponseEntity.ok(savedFavorite);
    }



    @DeleteMapping("/{favoriteId}")
    public String deleteFavorite(@PathVariable Integer favoriteId) {
        logger.info("Deleting favorite with ID: {}", favoriteId);
        favoriteService.deleteFavorite(favoriteId);
        return "redirect:/favorites/list"; // 削除後のリダイレクト
    }






    // ビューを返す
    @GetMapping("/list")
    public String viewFavorites(Model model) {
        // 認証済みのユーザーを取得
        String email = SecurityContextHolder.getContext().getAuthentication().getName();
        User user = userService.findByEmail(email); // emailからユーザーを取得
        if (user == null) {
            logger.error("認証済みのユーザーが見つかりません");
            return "redirect:/login"; // ログインページにリダイレクト
        }
        
        Integer userId = user.getId();
        List<Favorite> favorites = favoriteService.getFavoritesByUserId(userId);
        model.addAttribute("favorites", favorites);
        return "user/favorites";
    }
    
    



}
