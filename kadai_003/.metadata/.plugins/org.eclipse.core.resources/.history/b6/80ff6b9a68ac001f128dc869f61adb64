package com.example.samuraitravel.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class WebSecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests((requests) -> requests
                .requestMatchers("/css/**", "/images/**", "/js/**", "/storage/**", "/", "/signup/**").permitAll()
                .requestMatchers("/houses/**").permitAll() // 民宿詳細ページと一覧ページを認証不要に
                .requestMatchers("/houses/{id}").permitAll() // 民宿詳細ページは認証不要
                .requestMatchers("/houses/{id}/reviews").permitAll() // レビュー一覧ページは認証不要
                .requestMatchers(HttpMethod.POST, "/favorites/**").permitAll() // POSTのみ許可
                .requestMatchers(HttpMethod.POST, "/reviews/**").authenticated() // 投稿・削除は認証
                .requestMatchers("/favorites/**").authenticated() // その他は認証
                .requestMatchers("/admin/**").hasRole("ADMIN") // 管理者専用
                .anyRequest().authenticated() // その他は認証必須
            )
            .formLogin((form) -> form
                .loginPage("/login") // ログインページ
                .loginProcessingUrl("/login") // ログイン処理
                .defaultSuccessUrl("/?loggedIn") // ログイン成功時のリダイレクト先
                .failureUrl("/login?error") // ログイン失敗時のリダイレクト先
                .permitAll()
            )
            .logout((logout) -> logout
                .logoutSuccessUrl("/?loggedOut") // ログアウト時のリダイレクト先
                .permitAll()
            )
            .csrf().disable();

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

